
#(gdb) disassemble Fibonacci                           
#Dump of assembler code for function Fibonacci:            
#   0x080483fb <+0>:     push   %ebp                       
#   0x080483fc <+1>:     mov    %esp,%ebp                  
#   0x080483fe <+3>:     push   %ebx                       
#   0x080483ff <+4>:     sub    $0x4,%esp                  
#   0x08048402 <+7>:     cmpl   $0x0,0x8(%ebp)             
#   0x08048406 <+11>:    jne    0x804840f <Fibonacci+20>   
#   0x08048408 <+13>:    mov    $0x0,%eax                  
#   0x0804840d <+18>:    jmp    0x8048444 <Fibonacci+73>   
#   0x0804840f <+20>:    cmpl   $0x1,0x8(%ebp)             
#   0x08048413 <+24>:    jne    0x804841c <Fibonacci+33>   
#   0x08048415 <+26>:    mov    $0x1,%eax                  
#   0x0804841a <+31>:    jmp    0x8048444 <Fibonacci+73>   
#   0x0804841c <+33>:    mov    0x8(%ebp),%eax             
#   0x0804841f <+36>:    sub    $0x1,%eax                  
#   0x08048422 <+39>:    sub    $0xc,%esp                  
#   0x08048425 <+42>:    push   %eax                       
#   0x08048426 <+43>:    call   0x80483fb <Fibonacci>      
#   0x0804842b <+48>:    add    $0x10,%esp                 
#   0x0804842e <+51>:    mov    %eax,%ebx                  
#   0x08048430 <+53>:    mov    0x8(%ebp),%eax             
#   0x08048433 <+56>:    sub    $0x2,%eax                  
#   0x08048436 <+59>:    sub    $0xc,%esp                  
#   0x08048439 <+62>:    push   %eax                       
#   0x0804843a <+63>:    call   0x80483fb <Fibonacci>      
#   0x0804843f <+68>:    add    $0x10,%esp                 
#   0x08048442 <+71>:    add    %ebx,%eax                  
#   0x08048444 <+73>:    mov    -0x4(%ebp),%ebx            
#   0x08048447 <+76>:    leave                             
#   0x08048448 <+77>:    ret                               
#End of assembler dump.    
#
#(gdb) disassemble Fibonacci                           
#Dump of assembler code for function Fibonacci:            
#   0x080483fb <+0>:     push   %ebp                       
#   0x080483fc <+1>:     mov    %esp,%ebp                  
#   0x080483fe <+3>:     push   %ebx                       
#   0x080483ff <+4>:     sub    $0x4,%esp                  
#   0x08048402 <+7>:     cmpl   $0x0,0x8(%ebp)             
#   0x08048406 <+11>:    jne    0x804840f <Fibonacci+20>   
#   0x08048408 <+13>:    mov    $0x0,%eax                  
#   0x0804840d <+18>:    jmp    0x8048444 <Fibonacci+73>   
#   0x0804840f <+20>:    cmpl   $0x1,0x8(%ebp)             
#   0x08048413 <+24>:    jne    0x804841c <Fibonacci+33>   
#   0x08048415 <+26>:    mov    $0x1,%eax                  
#   0x0804841a <+31>:    jmp    0x8048444 <Fibonacci+73>   
#   0x0804841c <+33>:    mov    0x8(%ebp),%eax             
#   0x0804841f <+36>:    sub    $0x1,%eax                  
#   0x08048422 <+39>:    sub    $0xc,%esp                  
#   0x08048425 <+42>:    push   %eax                       
#   0x08048426 <+43>:    call   0x80483fb <Fibonacci>    计算 f(n-1)
#   0x0804842b <+48>:    add    $0x10,%esp                 
#   0x0804842e <+51>:    mov    %eax,%ebx                  
#   0x08048430 <+53>:    mov    0x8(%ebp),%eax             
#   0x08048433 <+56>:    sub    $0x2,%eax                  
#   0x08048436 <+59>:    sub    $0xc,%esp                  
#   0x08048439 <+62>:    push   %eax                       
#   0x0804843a <+63>:    call   0x80483fb <Fibonacci>  计算 f(n-2)    
#   0x0804843f <+68>:    add    $0x10,%esp                 
#   0x08048442 <+71>:    add    %ebx,%eax                  
#   0x08048444 <+73>:    mov    -0x4(%ebp),%ebx            
#   0x08048447 <+76>:    leave                             
#   0x08048448 <+77>:    ret                               
#End of assembler dump.    

break *0x08048426 
commands
    silent
	#info registers  esp
    printf "call f(n-1)---  eip:0x%x, esp:0x%x, ebp:0x%x, eax:0x%x\n", $eip, $esp, $ebp, $eax 
    continue
end

break *0x0804843a 
commands
    silent
	#info registers  esp
    printf "call f(n-2) eip:0x%x, esp:0x%x, ebp:0x%x, eax:0x%x\n", $eip, $esp, $ebp, $eax 
    continue
end

break *0x0804842e
commands
    silent
	#info registers  esp
    printf "call f(n-1) mov  %%eax,%%ebx eip:0x%x, esp:0x%x, ebp:0x%x, eax:0x%x\n", $eip, $esp, $ebp, $eax 
    continue
end

break *0x08048442 
commands
    silent
	#info registers  esp
    printf "call f(n-2) add %%ebx,%%eax eip:0x%x, esp:0x%x, ebp:0x%x, eax:0x%x\n", $eip, $esp, $ebp, $eax 
    continue
end

break *0x08048448 
commands
    silent
	#info registers  esp
    printf "ret L4 eip:0x%x, esp:0x%x, ebp:0x%x, eax:0x%x\n", $eip, $esp, $ebp, $eax 
    continue
end

break *0x08048425 
commands
    silent
	#info registers  esp
    printf "f(n-1) push   %%eax eip:0x%x, esp:0x%x, ebp:0x%x, eax:0x%x\n", $eip, $esp, $ebp, $eax 
    continue
end

break *0x08048439 
commands
    silent
	#info registers  esp
    printf "f(n-2) push   %%eax eip:0x%x, esp:0x%x, ebp:0x%x, eax:0x%x\n", $eip, $esp, $ebp, $eax 
    continue
end
