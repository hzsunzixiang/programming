void combinationUtil(int arr[], int n, int r, int index, int data[], int i)
{
	printf("index:%d, i: %d\n", index, i);
    if (index == r)
    {
        for (int j=0; j<r; j++)
            printf("%d ",data[j]);
        printf("\n");
        return;
    }
    if (i >= n)
        return;
    data[index] = arr[i];
    combinationUtil(arr, n, r, index+1, data, i+1);
    combinationUtil(arr, n, r, index, data, i+1);
}

凡是打印结果 或者 i == 5的地方都有return

				         栈层次
index:0, i: 0              1    
index:1, i: 1              2 
index:2, i: 2              3
index:3, i: 3              4 
1 2 3       					return 
index:2, i: 3              3 
index:3, i: 4              4 
1 2 4                           return 
index:2, i: 4              3
index:3, i: 5              4    
1 2 5      						return 
index:2, i: 5              3    return 
index:1, i: 2              2 
index:2, i: 3              3           
index:3, i: 4              4 
1 3 4      						return 
index:2, i: 4              3 
index:3, i: 5              4 
1 3 5      						return  
index:2, i: 5              3    return 
index:1, i: 3              2 
index:2, i: 4              3 
index:3, i: 5              4 
1 4 5      						return 
index:2, i: 5              3    return
index:1, i: 4              2 
index:2, i: 5              3    return
index:1, i: 5              2    return 
index:0, i: 1              1 
index:1, i: 2              2 
index:2, i: 3              3 
index:3, i: 4              4 
2 3 4      						return 
index:2, i: 4              3 
index:3, i: 5              4 
2 3 5      						return 
index:2, i: 5              3    return
index:1, i: 3              2 
index:2, i: 4              3 
index:3, i: 5              4 
2 4 5      						return 
index:2, i: 5              3    return 
index:1, i: 4              4    
index:2, i: 5              3    return 
index:1, i: 5              2    return
index:0, i: 2              1 
index:1, i: 3              2 
index:2, i: 4              3 
index:3, i: 5              4 
3 4 5       
index:2, i: 5              3	return
index:1, i: 4              2 
index:2, i: 5              3	return    
index:1, i: 5              2 	return
index:0, i: 3              1 
index:1, i: 4              2 
index:2, i: 5              3	return 
index:1, i: 5              2	return 
index:0, i: 4              1 
index:1, i: 5              2	return 
index:0, i: 5              1	return

