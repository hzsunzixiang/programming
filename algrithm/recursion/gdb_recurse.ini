

#   0x080483fb <+0>:     push   %ebp                            
#   0x080483fc <+1>:     mov    %esp,%ebp                       
#   0x080483fe <+3>:     sub    $0x18,%esp                      
#   0x08048401 <+6>:     cmpl   $0x1,0x8(%ebp)                  
#   0x08048405 <+10>:    jg     0x8048410 <rfact+21>            
#   0x08048407 <+12>:    movl   $0x1,-0xc(%ebp)                 
#   0x0804840e <+19>:    jmp    0x8048429 <rfact+46>            
#   0x08048410 <+21>:    mov    0x8(%ebp),%eax                  
#   0x08048413 <+24>:    sub    $0x1,%eax                       
#   0x08048416 <+27>:    sub    $0xc,%esp                       
#   0x08048419 <+30>:    push   %eax                            
#=> 0x0804841a <+31>:    call   0x80483fb <rfact>               

#   这里是分界点  一级级的返回
#  返回值放到eax  每一级 返回一个值 知道返回到main函数
#  0x8(%ebp) 参数值， 以及上一级的 返回值 eax
#   0x0804841f <+36>:    add    $0x10,%esp                      
#   0x08048422 <+39>:    imul   0x8(%ebp),%eax                  
#   0x08048426 <+43>:    mov    %eax,-0xc(%ebp)                 
#   0x08048429 <+46>:    mov    -0xc(%ebp),%eax                 
#   0x0804842c <+49>:    leave                                  
#   0x0804842d <+50>:    ret                                     





#   0x080483fb <+0>:     push   %ebp                            
#   0x080483fc <+1>:     mov    %esp,%ebp                       
#   0x080483fe <+3>:     sub    $0x18,%esp                      
#   0x08048401 <+6>:     cmpl   $0x1,0x8(%ebp)                  
#   0x08048405 <+10>:    jg     0x8048410 <rfact+21>            
#   0x08048407 <+12>:    movl   $0x1,-0xc(%ebp)                 
#   0x0804840e <+19>:    jmp    0x8048429 <rfact+46>            
#   0x08048410 <+21>:    mov    0x8(%ebp),%eax                  
#   0x08048413 <+24>:    sub    $0x1,%eax                       
#   0x08048416 <+27>:    sub    $0xc,%esp                       
#   0x08048419 <+30>:    push   %eax                            
#=> 0x0804841a <+31>:    call   0x80483fb <rfact>               
#   0x0804841f <+36>:    add    $0x10,%esp                      
#   0x08048422 <+39>:    imul   0x8(%ebp),%eax                  
#   0x08048426 <+43>:    mov    %eax,-0xc(%ebp)                 
#   0x08048429 <+46>:    mov    -0xc(%ebp),%eax                 
#   0x0804842c <+49>:    leave                                  
#   0x0804842d <+50>:    ret                                     



break *0x080483fb 
commands
    silent
	#info registers  esp
    printf "push %%ebp---  eip:0x%x, esp:0x%x, ebp:0x%x, eax:0x%x\n", $eip, $esp, $ebp, $eax 
    continue
end

break *0x08048422
commands
    silent
	#info registers  esp
    printf "imul   0x8(%%ebp),%%eax---  eip:0x%x, esp:0x%x, ebp:0x%x, eax:0x%x\n", $eip, $esp, $ebp, $eax 
    continue
end


break *0x08048419
commands
    silent
    printf "push %%eax---  eip:0x%x, esp:0x%x, ebp:0x%x, eax:0x%x\n", $eip, $esp, $ebp, $eax 
    continue
end

break *0x0804842d
commands
    silent
    printf "ret---  eip:0x%x, esp:0x%x, ebp:0x%x, eax:0x%x\n", $eip, $esp, $ebp, $eax 
    continue
end

#break *0x0804842d
#commands
#    silent
#    printf "ret--- esp:%x, ebp:%x, eax:%x\n", $esp, $ebp, $eax 
#    continue
#end










#栈逐级调用  逐级返回
#(gdb) c
#Continuing.
#push %ebp---  eip:0x80483fb, esp:0xbffff20c, ebp:0xbffff238, eax:0x1
#push %eax---  eip:0x8048419, esp:0xbffff1e4, ebp:0xbffff208, eax:0x9
#push %ebp---  eip:0x80483fb, esp:0xbffff1dc, ebp:0xbffff208, eax:0x9
#push %eax---  eip:0x8048419, esp:0xbffff1b4, ebp:0xbffff1d8, eax:0x8
#push %ebp---  eip:0x80483fb, esp:0xbffff1ac, ebp:0xbffff1d8, eax:0x8
#push %eax---  eip:0x8048419, esp:0xbffff184, ebp:0xbffff1a8, eax:0x7
#push %ebp---  eip:0x80483fb, esp:0xbffff17c, ebp:0xbffff1a8, eax:0x7
#push %eax---  eip:0x8048419, esp:0xbffff154, ebp:0xbffff178, eax:0x6
#push %ebp---  eip:0x80483fb, esp:0xbffff14c, ebp:0xbffff178, eax:0x6
#push %eax---  eip:0x8048419, esp:0xbffff124, ebp:0xbffff148, eax:0x5
#push %ebp---  eip:0x80483fb, esp:0xbffff11c, ebp:0xbffff148, eax:0x5
#push %eax---  eip:0x8048419, esp:0xbffff0f4, ebp:0xbffff118, eax:0x4
#push %ebp---  eip:0x80483fb, esp:0xbffff0ec, ebp:0xbffff118, eax:0x4
#push %eax---  eip:0x8048419, esp:0xbffff0c4, ebp:0xbffff0e8, eax:0x3
#push %ebp---  eip:0x80483fb, esp:0xbffff0bc, ebp:0xbffff0e8, eax:0x3
#push %eax---  eip:0x8048419, esp:0xbffff094, ebp:0xbffff0b8, eax:0x2
#push %ebp---  eip:0x80483fb, esp:0xbffff08c, ebp:0xbffff0b8, eax:0x2
#push %eax---  eip:0x8048419, esp:0xbffff064, ebp:0xbffff088, eax:0x1
#push %ebp---  eip:0x80483fb, esp:0xbffff05c, ebp:0xbffff088, eax:0x1
#ret---  eip:0x804842d, esp:0xbffff05c, ebp:0xbffff088, eax:0x1
#imul   0x8(%ebp),%eax---  eip:0x8048422, esp:0xbffff070, ebp:0xbffff088, eax:0x1
#ret---  eip:0x804842d, esp:0xbffff08c, ebp:0xbffff0b8, eax:0x2
#imul   0x8(%ebp),%eax---  eip:0x8048422, esp:0xbffff0a0, ebp:0xbffff0b8, eax:0x2
#ret---  eip:0x804842d, esp:0xbffff0bc, ebp:0xbffff0e8, eax:0x6
#imul   0x8(%ebp),%eax---  eip:0x8048422, esp:0xbffff0d0, ebp:0xbffff0e8, eax:0x6
#ret---  eip:0x804842d, esp:0xbffff0ec, ebp:0xbffff118, eax:0x18
#imul   0x8(%ebp),%eax---  eip:0x8048422, esp:0xbffff100, ebp:0xbffff118, eax:0x18
#ret---  eip:0x804842d, esp:0xbffff11c, ebp:0xbffff148, eax:0x78
#imul   0x8(%ebp),%eax---  eip:0x8048422, esp:0xbffff130, ebp:0xbffff148, eax:0x78
#ret---  eip:0x804842d, esp:0xbffff14c, ebp:0xbffff178, eax:0x2d0
#imul   0x8(%ebp),%eax---  eip:0x8048422, esp:0xbffff160, ebp:0xbffff178, eax:0x2d0
#ret---  eip:0x804842d, esp:0xbffff17c, ebp:0xbffff1a8, eax:0x13b0
#imul   0x8(%ebp),%eax---  eip:0x8048422, esp:0xbffff190, ebp:0xbffff1a8, eax:0x13b0
#ret---  eip:0x804842d, esp:0xbffff1ac, ebp:0xbffff1d8, eax:0x9d80
#imul   0x8(%ebp),%eax---  eip:0x8048422, esp:0xbffff1c0, ebp:0xbffff1d8, eax:0x9d80
#ret---  eip:0x804842d, esp:0xbffff1dc, ebp:0xbffff208, eax:0x58980
#imul   0x8(%ebp),%eax---  eip:0x8048422, esp:0xbffff1f0, ebp:0xbffff208, eax:0x58980
#ret---  eip:0x804842d, esp:0xbffff20c, ebp:0xbffff238, eax:0x375f00

