OSSL-GUIDE-LIBSSL-INTRODUCTION(7ossl)                                                    OpenSSL                                                   OSSL-GUIDE-LIBSSL-INTRODUCTION(7ossl)

NAME
       ossl-guide-libssl-introduction, ssl - OpenSSL Guide: An introduction to libssl

INTRODUCTION
       The OpenSSL "libssl" library provides implementations of several secure network communications protocols. Specifically it provides SSL/TLS (SSLv3, TLSv1, TLSv1.1, TLSv1.2 and
       TLSv1.3), DTLS (DTLSv1 and DTLSv1.2) and QUIC (client side only). The library depends on "libcrypto" for its underlying cryptographic operations (see
       ossl-guide-libcrypto-introduction(7)).

       The set of APIs supplied by "libssl" is common across all of these different network protocols, so a developer familiar with writing applications using one of these protocols
       should be able to transition to using another with relative ease.

       An application written to use "libssl" will include the <openssl/ssl.h> header file and will typically use two main data structures, i.e. SSL and SSL_CTX.

       An SSL object is used to represent a connection to a remote peer. Once a connection with a remote peer has been established data can be exchanged with that peer.

       When using DTLS any data that is exchanged uses "datagram" semantics, i.e.  the packets of data can be delivered in any order, and they are not guaranteed to arrive at all. In
       this case the SSL object used for the connection is also used for exchanging data with the peer.

       Both TLS and QUIC support the concept of a "stream" of data. Data sent via a stream is guaranteed to be delivered in order without any data loss. A stream can be uni- or bi-
       directional.

       SSL/TLS only supports one stream of data per connection and it is always bi-directional. In this case the SSL object used for the connection also represents that stream. See
       ossl-guide-tls-introduction(7) for more information.

       The QUIC protocol can support multiple streams per connection and they can be uni- or bi-directional. In this case an SSL object can represent the underlying connection, or a
       stream, or both. Where multiple streams are in use a separate SSL object is used for each one. See ossl-guide-quic-introduction(7) for more information.

       An SSL_CTX object is used to create the SSL object for the underlying connection. A single SSL_CTX object can be used to create many connections (each represented by a separate
       SSL object). Many API functions in libssl exist in two forms: one that takes an SSL_CTX and one that takes an SSL.  Typically settings that you apply to the SSL_CTX will then be
       inherited by any SSL object that you create from it. Alternatively you can apply settings directly to the SSL object without affecting other SSL objects. Note that you should
       not normally make changes to an SSL_CTX after the first SSL object has been created from it.

DATA STRUCTURES
       As well as SSL_CTX and SSL there are a number of other data structures that an application may need to use. They are summarised below.

       SSL_METHOD (SSL Method)
           This structure is used to indicate the kind of connection you want to make, e.g.  whether it is to represent the client or the server, and whether it is to use SSL/TLS, DTLS
           or QUIC (client only). It is passed as a parameter when creating the SSL_CTX.

       SSL_SESSION (SSL Session)
           After establishing a connection with a peer the agreed cryptographic material can be reused to create future connections with the same peer more rapidly. The set of data
           used for such a future connection establishment attempt is collected together into an SSL_SESSION object. A single successful connection with a peer may generate zero or
           more such SSL_SESSION objects for use in future connection attempts.

       SSL_CIPHER (SSL Cipher)
           During connection establishment the client and server agree upon cryptographic algorithms they are going to use for encryption and other uses. A single set of cryptographic
           algorithms that are to be used together is known as a ciphersuite. Such a set is represented by an SSL_CIPHER object.

           The set of available ciphersuites that can be used are configured in the SSL_CTX or SSL.

FURTHER READING
       See ossl-guide-tls-introduction(7) for an introduction to the SSL/TLS protocol and ossl-guide-quic-introduction(7) for an introduction to QUIC.

       See ossl-guide-libcrypto-introduction(7) for an introduction to "libcrypto".

SEE ALSO
       ossl-guide-libcrypto-introduction(7), ossl-guide-tls-introduction(7), ossl-guide-quic-introduction(7)

COPYRIGHT
       Copyright 2000-2023 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the Apache License 2.0 (the "License").  You may not use this file except in compliance with the License.  You can obtain a copy in the file LICENSE in the source
       distribution or at <https://www.openssl.org/source/license.html>.

3.2.2                                                                                  2024-09-05                                                  OSSL-GUIDE-LIBSSL-INTRODUCTION(7ossl)
