


[TOC]

正如分享[超大规模云计算中的调度与虚拟化](http://km.oa.com/articles/show/391867?ts=1545206813)中指出的，RabbitMQ在CVM系统(尤其是VStation操作系统)中充当着大动脉的角色，几乎所有的核心组件都要跟RabbitMQ通信, MQ不可用直接导致整个CVM业务不可用。所以RabbitMQ的高可用具有至关重要的意义，加之TCE环境众多，差异大，对MQ的高可用提出了更高的挑战。

本文`RabbitMQ心跳机制解析`主要结合RabbitMQ的客户端pika的实现以及CVM的业务阐述RabbitMQ的心跳机制。
心跳(heartbeat)对RabbitMQ的连接状态有很重要的影响，特别是目前使用不支持多线程的pika库，并受热迁移影响，心跳设置的比较大，在很特殊的情况下会引发一些很难排查的故障,这在文章 [记一次NAT引发的CVM业务不可用的故障](xxxxx) 有所记录，搞清楚RabbitMQ的心跳机制，对于排查故障有着直接帮助。


## 1. RabbitMQ心跳(heartbeat)介绍

hearbeat的超时时间用来判断TCP连接何时不可达,从而客户端或者Server主动断开链接，心跳值是由客户端和RabbitMQ server在连接阶段共同协商，
[这里有详细说明](https://www.rabbitmq.com/heartbeats.html)
```
The heartbeat timeout value defines after what period of time the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. This value is negotiated between the client and RabbitMQ server at the time of connection. The client must be configured to request heartbeats.
```

## 2. 心跳受RabbitMQ客户端影响的若干因素

### 2.1 不同的语言实现在heartbeat的协商逻辑上有所不同
   java和.net等语言的实现跟python的pika库在heartbeat的协商逻辑上有所不同.
   比如[Java, .NET 和Erlang的客户端实现的心跳时间协商算法](https://www.rabbitmq.com/heartbeats.html#heartbeats-timeout)
   本文只讨论python语言的实现pika库中心跳的协商算法.
   
### 2.2 不同的pika版本在heartbeat的协商逻辑上有所不同.
   本文以两个典型的版本`0.11.2版本`和当前最新的`1.1.0版本`为例来阐述。
   
### 2.3 不同的RabbitMQ server的版本，heartbeat的默认值有所不同
   3.5.5版本及以下默认值为为580S, 本文使用的版本为3.6.6，默认值为60S.

server端的heartbeat值可以在[配置文件]( https://stackoverflow.com/questions/7593269/verify-version-of-rabbitmq )中修改，本文以3.6.6版本为例讨论
	 
	 
## 3. 心跳协商规则 
这篇文章[Pika: What's the effect of parameter heartbeat in connection?](https://stackoverflow.com/questions/46804705/pika-whats-the-effect-of-parameter-heartbeat-in-connection)说的并不甚精确，本文结合pika给出精确的协商规则。

### 3.1 正常情况下的协商规则
讨论在客户端配置协商值，或者配置的协商为正整数且不为零时的情况.

pika的`0.11.2`和`1.1.0`版本有着较大差异,假设客户端设置的心跳值值为T<sub>client</sub>, 服务端的心跳配置为T<sub>server</sub>, 具体规则为:
#### 3.1.1  0.11.2版本
* 取客户端和Server协商的最小值 min(T<sub>client</sub>,T<sub>server</sub>)
* 客户端只能减小，而不能提高hearbeat值
[这里指出](https://www.rabbitmq.com/heartbeats.html)
```
Note that in case RabbitMQ server has a non-zero heartbeat timeout configured (which is the default in versions starting with 3.6.x), the client can only lower the value but not increase it.
```
#### 3.1.2 1.1.0版本
* 以客户端的设置值为准

#### 3.1.3 具体规则实例
假设server设置为默认值 60S
|**T<sub>server</sub>**                            |    **T<sub>client</sub>** |    0.11.2<br> min(T<sub>client</sub>,T<sub>server</sub>) | 1.1.0 <br>T<sub>client</sub>|
|----                |----          |----           |---- |
|60                |40          |40           |40 |
|60                |60            |60      |60 |
|60                |80            |  60    |80 |
|60                |100            |60      |100 |


### 3.2 客户端不设置或者设置为0时
特别的，当pika客户端不设置心跳值，或者设置为0时，此时心跳值以服务端为准。

|**T<sub>server</sub>**                            |    **T<sub>client</sub>** |**0.11.2** | **1.1.0**|
|----                |----          |----           |---- |
|40                |0          |40           |40 |
|60                |0          |60            |60  |
|100                |0            |100      |100 |
|200                |0            |  200    |200 |
|300                |0            |300      |300 |

### 3.3 server端设置的值比较大时
RabbitMQ server的设置的值较大时，实际生效值是取模而定的，而且只跟服务端的设置有关系。
|**T<sub>server</sub>**                            |    **T<sub>client</sub>** |**0.11.2** | **1.1.0**|
|----                |----          |----           |---- |
|10<sup>3</sup>  |0   |1000  |1000  |
|10<sup>4</sup>  |0   |10000 |10000 |
|10<sup>5</sup>  |0   |34464 |34464 |
|10<sup>6</sup>  |0   |16960 |16960 |
|10<sup>7</sup>  |0   |38528 |38528 |
|10<sup>8</sup>  |0   |57600 |57600 |
|10<sup>9</sup>  |0   |51712 |51712 |



## 4. 连接断开时间 

 客户端pika0.11.2版本和pika1.1.0版本在处理心跳时有差异，单独讨论。

## 4.1 pika1.1.0版本

### 4.1.1 客户端超时断开时间
以pika1.1.0客户端版本为例，这里涉及几个概念

1. heartbeat协商时间(T<sub>nego</sub>)
  即客户端和服务端在连接建立时协商的时间，记为T<sub>nego</sub>, 即为上面几节所讨论的内容。
2. heartbeat发送时间间隔(T<sub>interv</sub>)
  即客户端每隔多久的时间间隔发送心跳到服务端.
  T<sub>interv</sub> = T<sub>nego</sub> / 2
3. heartbeat检查时间间隔(T<sub>interv</sub>)
  当客户端在某个时间间隔内持续收不到对方心跳的响应，就会做一次检查，触发2次检查就会断开连接。
  T<sub>check</sub> = T<sub>nego</sub> + 5
  这里pika的实现涉及一个变量:self._idle_byte_intervals = 0
  * 第1次触发检查时 self._idle_byte_intervals = 0
  * 第2次触发检查时 self._idle_byte_intervals = 1
  当self._idle_byte_intervals > 0 时则连接断开,此时触发了两次检查.
  所以，当持续收不到服务端的heartbeat报文，则连接断开的时间间隔最高可达 2(T<sub>nego</sub> + 5)
 
另外实验观察到服务端断开的最大时间间隔，跟官方文档描述不太吻合。
实验得出的服务端断开的时间为6个协商时间  6* T<sub>nego</sub>
```
## [Heartbeat Frames](https://www.rabbitmq.com/heartbeats.html#heartbeats-interval)

Heartbeat frames are sent about every heartbeat timeout / 2 seconds. This value is sometimes referred to as the heartbeat interval. After two missed heartbeats, the peer is considered to be unreachable. Different clients manifest this differently but the TCP connection will be closed. When a client detects that RabbitMQ node is unreachable due to a heartbeat, it needs to re-connect.
```
### 4.1.2 实例
**pika1.1.0各参数的实例列表。**
|**心跳值** |**服务端心跳间隔**|**客户端心跳间隔**|**最大的服务端超时断开时间**|**最大的客户端超时断开时间**|
|----  |----          |----           |---- | ---- |
|20  |  20  |10  |6\*20=120  | 2(20+5)=50|
|40  |  40  |20  |6\*40=240  | 2(40+5)=90|



## 4.1 pika0.11.2版本

### 4.1.1 客户端超时断开时间
对于pika0.11.2客户端版本，
1. heartbeat协商时间(T<sub>nego</sub>)
  即客户端和服务端在连接建立时协商的时间，记为T<sub>nego</sub>, 即为上面几节所讨论的内容。
2. heartbeat发送时间间隔(T<sub>interv</sub>)
  即客户端每隔多久的时间间隔发送心跳到服务端.
  T<sub>interv</sub> = T<sub>nego</sub> 
3. heartbeat检查时间间隔(T<sub>interv</sub>)
  当客户端在某个时间间隔内持续收不到对方心跳的响应，就会做一次检查，触发`4`次检查就会断开连接。
  T<sub>check</sub> = T<sub>nego</sub> 
  
  ```
  在pika0.11.2版本中，虽然代码的本意是最大空闲心跳周期的个数为`2` (MAX_IDLE_COUNT = 2)
  但是实际的结果是4个心跳周期连接才会断开(除了序号从0开始,怀疑有一个bug导致多判断了一次)。
  ```
    
 
### 4.1.2 实例
**pika0.11.2各参数的实例列表。**
|**心跳值**|**服务端心跳间隔**|**客户端心跳间隔**|**最大的服务端超时断开时间**|**最大的客户端超时断开时间**|
|----  |----          |----           |---- | ---- |
|20  |  20  |20  |6\*20=120  |4\*20=120|
|40  |  40  |40  |6\*40=240  | 4\*40=240|


## 5. 在CVM业务中的具体体现
目前使用的的pika版本不支持多线程。
在实际的CVM系统中，如[云端大爆炸-永不掉线的秘密](http://km.oa.com/group/19368/articles/show/333012)所述，其中涉及热迁移操作。对`操作内存频繁的云主机`进行热迁移时，非常耗时，此时心跳设置不宜太短，否则会造成RabbitMQ连接断开的情况。
目前RabbitMQ server设置的心跳时间比较大， 但此时又会造成其他方面的问题，这种情形会在文章[记一次NAT引发的CVM业务不可用的故障](xxx)中详细描述。
   
   
 
