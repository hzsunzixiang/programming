
1> dbg:tracer().
{ok,<0.83.0>}
2> dbg:p(self(), [c, timestamp]).
{ok,[{matched,nonode@nohost,1}]}
3> dbg:tp(traceme, baz, [{['_', '_', '$7000'], [{'==', {'element', 1, '$7000'}, ok}], [{message,{'element',2,'$7000'}}, {return_trace}]}]).
{ok,[{matched,nonode@nohost,1},{saved,1}]}
4> traceme:baz(1,2,3).
in the foo 123
ok
5> traceme:baz(1,2,{ok, msg}).
in the foo 12{ok,msg}
(<0.81.0>) call traceme:baz(1,2,{ok,msg}) (msg) (Timestamp: {1667,206620,
                                                             416383})
(<0.81.0>) returned from traceme:baz/3 -> ok (Timestamp: {1667,206620,416542})
ok
6> dbg:fun2ms(fun([A, B]) when is_list(A) andalso is_integer(B) -> message(caller()) end).
[{['$1','$2'],
  [{'andalso',{is_list,'$1'},{is_integer,'$2'}}],
  [{message,{caller}}]}]
7>
7>
7> dbg:fun2ms(fun(_) -> return_trace() end).
[{'_',[],[{return_trace}]}]
8> dbg:fun2ms(fun([A, A]) -> ok end).
[{['$1','$1'],[],[ok]}]
9>
9>
9> dbg:fun2ms(fun([A, B]) when A > B -> enable_trace(garbage_collection) end).
[{['$1','$2'],
  [{'>','$1','$2'}],
  [{enable_trace,garbage_collection}]}]
10>
10>

