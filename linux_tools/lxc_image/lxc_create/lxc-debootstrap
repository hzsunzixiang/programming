#!/bin/sh

# lxc-debootstrap

set -e
set -x
LC_ALL=C


################################################################################
## Help
################################################################################
#
usage() {
	cat <<EOT
Usage: $0 NAME

Create LXC container.

Example :
$0 -n example1
EOT
}


###############################################################################
# Functions
###############################################################################

#####
#这个函数的目的是为了
#    * 缓存镜像生成时的log 放在 $deb_out 中
#    * 最终把镜像放在$lxc_rootfs中
#####




#初始化必要的目录
initialize(){
    if [ -d $lxc_rootfs ]
    then 
       echo "the name $lxc_name has already exist, exit....................................."
       exit 1
    fi
    echo "creating root directory $lxc_rootpath"
    mkdir -p $lxc_rootfs
}

# 生成镜像
create_image(){
    # 安装需要的包
    aptitude install qemu
    modprobe nbd
    # 创建镜像

    NBD=nbd1
    qemu-img  create -f qcow2  $lxc_rootpath/lxc_image.qcow2 20G
    qemu-img  info $lxc_rootpath/lxc_image.qcow2
    qemu-nbd -c /dev/$NBD $lxc_rootpath/lxc_image.qcow2
    mkfs.ext4 -F /dev/$NBD
    mount /dev/$NBD $lxc_rootfs 

    # 不再使用dd
    #dd if=/dev/zero of=$lxc_rootpath/lxc_image.raw bs=10M count=100 
    #sleep 2
    #mkfs.ext4 -F  $lxc_rootpath/lxc_image.raw
    #sleep 2
    ## 挂载到loop设备上
    #mount -o loop $lxc_rootpath/lxc_image.raw $lxc_rootfs 
}

# 压缩镜像
convert_image(){
    #qemu-img convert -c -f raw -O qcow2   $lxc_rootpath/lxc_image.raw $lxc_rootpath/lxc_image_final.qcow2 
    qemu-img convert -c -f qcow2 -O qcow2   $lxc_rootpath/lxc_image.qcow2 $lxc_rootpath/lxc_image_final.qcow2 
}

install_lxc() {
    aptitude install lxc debootstrap
    # 把镜像挂载到这个目录
debootstrap --verbose --variant=minbase --arch=amd64 --include ifupdown,locales,libui-dialog-perl,\
dialog,netbase,net-tools,libterm-readline-perl-perl,dnsutils,apt-utils,isc-dhcp-client,inetutils-ping,tcpdump,aptitude,iproute,openssh-server,vim \
wheezy $lxc_rootfs http://ftp.cn.debian.org/debian/


}


# cgroup 

#调用grub_init() 是为了解决一个bug,
#Optional: Enable memory cgroup support (534964) (CONFIG_CGROUP_MEM_RES_CTLR) - Since 2.6.39-bpo60-2 for Squeeze the memory cgroup support is built in, so lxc-checkconfig will give you a green result about this point. At the same time, it is deactivated by default. You need to activate memory cgroup support with a kernel parameter. When using grub2, this can be easily done by adding GRUB_CMDLINE_LINUX="cgroup_enable=memory" in /etc/default/grub and running update-grub2. Same for CONFIG_CGROUP_MEM_RES_CTLR_SWAP - see http://lists.debian.org/debian-kernel/2012/01/msg00804.html . 




# 这个操作涉及重启，必须手工操作
#grub_init() {
#    GRUB_FILE="/etc/default/grub"
#    # 如果没有这一行，需要加上
#    if ! grep "cgroup_enable=memory" $GRUB_FILE 
#    then 
#    cat <<EOG > "$GRUB_FILE"
#GRUB_CMDLINE_LINUX="cgroup_enable=memory"
#EOG
#    #else "there have been cgroup_enable=memory"
#    fi
#    ## 如果运行下面一行之后不起作用，需要重启机器
#    update-grub2
#    ## 这里必须手工干预,重启机器，不然会出现
#    #root@localhost:/rootfs# service mount-cgroup start
#    #mount: special device memory does not exist
#
#}
cgroup_init() {
    # grub initialize
    #grub_init
    
    # 安装包cgroup 
    aptitude install cgroup
    # 添加配置 
    CGROUP_FILE="/etc/init.d/mount-cgroup"
    # 检查这个文件是否存在，并且是可执行文件
    if [ ! -x "$CGROUP_FILE" ]
    then
        cat <<EOT >> "$CGROUP_FILE"
#! /bin/sh
#
# mount script for cgroup
#
#
### BEGIN INIT INFO
# Provides:          Cgroup
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Should-Start:      hal avahi cgconfig
# Should-Stop:       hal avahi cgconfig
# Default-Start:     2 3 4 5
# Default-Stop:
# Short-Description: mount cgroup
### END INIT INFO
# mount Cgroup
mount -t tmpfs cgroup_root /sys/fs/cgroup/
mkdir /sys/fs/cgroup/cpuset
mount -t cgroup -ocpuset cpuset /sys/fs/cgroup/cpuset
mkdir /sys/fs/cgroup/blkio
mount -t cgroup -oblkio blkio /sys/fs/cgroup/blkio/
mkdir /sys/fs/cgroup/cpuacct
mount -t cgroup -ocpuacct cpuacct /sys/fs/cgroup/cpuacct/
mkdir /sys/fs/cgroup/freezer
mount -t cgroup -ofreezer freezer /sys/fs/cgroup/freezer/
mkdir /sys/fs/cgroup/devices
mount -t cgroup -odevices devices /sys/fs/cgroup/devices/
mkdir /sys/fs/cgroup/cpu
mount -t cgroup -ocpu cpu /sys/fs/cgroup/cpu
mkdir /sys/fs/cgroup/memory
mount -t cgroup -omemory memory /sys/fs/cgroup/memory
EOT
     chmod u+x $CGROUP_FILE
    else 
        echo "the file $CGROUP_FILE exist"
    fi
    service mount-cgroup start
    # 断定这些文件存在 ,如果不存在，说明没配置好
    
   # cgroup_files=( blkio cpu cpuacct cpuset devices freezer memory )
   # for i in ${cgroup_files[@]}                #将@替换为*亦可
   # do
   #        if ! ls /sys/fs/cgroup/$i
   #        then 
   #            echo "/sys/fs/cgroup/$i not  exist"
   #            exit 1
   #        else 
   #            echo "/sys/fs/cgroup/$i exist"
   #        fi
   # done
}


# 准备网桥
bridge_init() {
    apt-get install vlan bridge-utils
    modprobe 8021q
    
    SYSCTL_FILE=/etc/sysctl.conf
    # allow ip forwarding
    sysctl -w net.ipv4.ip_forward=1
    
    # create internal bridge and allow forwarding. Adjust address for your allocation
    # 因为一个接口一旦挂接到一个网桥上，那么这个接口就不可用了，
    # 而且虚拟中一般只有一个网卡，所以这里使用vlan的方式
    cat >> /etc/network/interfaces <<EOM
auto eth0.1
iface eth0.1 inet manual
    vlan-raw-device eth0

auto br100
iface br100 inet static
        bridge_ports eth0.1
        address 192.168.2.77
        netmask 255.255.255.0
EOM
    ifup br100
}

network_init(){
    # 设置主机名
    echo "networking : setting hostname"
    echo $lxc_name >"$lxc_rootfs/etc/hostname"
    
    # 设置dns
    echo "networking : setting DNS resolver $net_resolver"
    echo "nameserver $net_dns_resolver" >"$lxc_rootfs/etc/resolv.conf"
    [ "$net_domain" ] && echo "search $net_domain" >>"$lxc_rootfs/etc/resolv.conf"
    
    
    # 采用dhcp的方式，但是并没有lxc虚拟机能访问的dhcp服务器，
    # 这里可以给其分配ip，但是这样的镜像不符合要求
    # 所以lxc虚拟机的网络最后需要手工配置
    echo "networking : setting IP configuration"
    cat <<EOT >"$lxc_rootfs/etc/network/interfaces"
# interfaces(5) file used by ifup(8) and ifdown(8)
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
EOT

echo "networking : creating hosts file"
host_file="$lxc_rootfs/etc/hosts"
cat <<EOT >$host_file
127.0.0.1 localhost
EOT
    if [ "$net_domain" ]; then
    	echo "127.0.1.1 $lxc_name.$net_domain $lxc_name" >>$host_file
    else
    	echo "127.0.1.1 $lxc_name" >>$host_file
    fi

}
inittab_init() {

    # 清除inittab的一些项
    cat  <<EOT >"$lxc_rootfs/etc/inittab"
# /etc/inittab: init(8) configuration.
# $Id: inittab,v 1.91 2002/01/25 13:35:21 miquels Exp $

# The default runlevel.
id:2:initdefault:

# Boot-time system configuration/initialization script.
# This is run first except when booting in emergency (-b) mode.
si::sysinit:/etc/init.d/rcS

# What to do in single-user mode.
~:S:wait:/sbin/sulogin

# /etc/init.d executes the S and K scripts upon change
# of runlevel.
#
# Runlevel 0 is halt.
# Runlevel 1 is single-user.
# Runlevels 2-5 are multi-user.
# Runlevel 6 is reboot.

l0:0:wait:/etc/init.d/rc 0
l1:1:wait:/etc/init.d/rc 1
l2:2:wait:/etc/init.d/rc 2
l3:3:wait:/etc/init.d/rc 3
l4:4:wait:/etc/init.d/rc 4
l5:5:wait:/etc/init.d/rc 5
l6:6:wait:/etc/init.d/rc 6
# Normally not reached, but fallthrough in case of emergency.
z6:6:respawn:/sbin/sulogin

# What to do when CTRL-ALT-DEL is pressed.
ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -r now

# /sbin/getty invocations for the runlevels.
#
# The "id" field MUST be the same as the last
# characters of the device (after "tty").
#
# Format:
#  :::
#
1:2345:respawn:/sbin/getty 38400 console
EOT

}


lxc_config_init() {
    echo "creating configuration file $lxc_config"
cat <<EOT >$lxc_config
lxc.utsname = $lxc_name
lxc.tty = 6
lxc.pts = 1024
lxc.rootfs = $lxc_rootfs
lxc.cgroup.devices.deny = a
# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
# rtc
lxc.cgroup.devices.allow = c 254:0 rwm
# network
lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = $net_bridge_if
lxc.network.name = eth0
lxc.network.hwaddr = 00:FF:12:34:56:78
EOT
}

# 安装


###############################################################################
# Main
###############################################################################

#if [ $# != 1 ]; then
#	usage
#	exit 1
#else
#	lxc_name="$1"
#fi
WITH_NET=0
while getopts "wn:" arg; do
      case $arg in
        w)
          echo "with network config" 
          WITH_NET=1
          ;;
       n)
          lxc_name=$OPTARG
  
          echo "========================================"$lxc_name
          ;;
      esac
    done

# Configuration variables
# LXC的根目录
LXC_PATH="/lxc"
if [ ! -d $LXC_PATH ]
then 
    mkdir $LXC_PATH
    ln -s /lxc /var/lib/lxc
fi

# 下载镜像的mirror，用cn的镜像更快
DEBIAN_MIRROR="http://ftp.cn.debian.org/debian/"

aptitude install lsb
DEBIAN_SUITE=$(lsb_release -s --codename)
DEBIAN_ARCH=$(dpkg --print-architecture)
# 上面两行获取debian版本和体系结构
#root@10-160-163-42:/lxc# lsb_release -s --codename
#wheezy
#root@10-160-163-42:/lxc# dpkg --print-architecture
#amd64


net_ipaddr="192.168.2.78"
net_mask="255.255.255.0"
net_bridge_if="br100"
net_dns_resolver="8.8.8.8"
lxc_rootpath="$LXC_PATH/$lxc_name" # 形如/lxc/example
lxc_rootfs="$lxc_rootpath/rootfs"  # 形如/lxc/example/rootfs
lxc_config="$lxc_rootpath/config"  # 形如/lxc/example/config
debian_mirror="$DEBIAN_MIRROR"
debian_suite="$DEBIAN_SUITE"
debian_arch="$DEBIAN_ARCH"

# 手工grub初始化
#grub_init
# cgroup初始化
cgroup_init

# 网络初始化
if [ $WITH_NET -eq 1 ]
then 
    bridge_init
fi
#初始化必要的目录
initialize

# 生成镜像,并挂载
create_image
# 安装镜像
install_lxc

# 设置主机名，dns等

network_init

inittab_init

#初始化配置
lxc_config_init

# 修改密码
chroot $lxc_rootfs passwd

#echo "starting container with lxc-start"
#lxc-start -d -n $lxc_name
# 压缩镜像

convert_image
echo "Done."
